Index: create.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\n\n\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = 'ninninu'\n\n#Radu\n#app.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://postgres:zxcvbnm@localhost:5432/db_progetto\"\n#Lorenzo\napp.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://postgres:A1n3m3d123!@localhost:5432/bd2_proj\"\n#Daniele\n#app.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://postgres:Internet10@localhost:5432/bd2progetto\"\n\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n\n\nclass Users(db.Model):\n    __tablename__ = 'users'\n\n    id_users = db.Column(db.VARCHAR(50),primary_key=True)\n    name = db.Column(db.VARCHAR(50))\n    surname = db.Column(db.VARCHAR(50))\n    sex = db.Column(db.VARCHAR(1))\n    mail = db.Column(db.VARCHAR(50))\n    pwd = db.Column(db.VARCHAR(50))\n    birth_date = db.Column(db.Date)\n    authenticated = db.Column(db.Boolean, default=False)\n\n    def __init__(self, id_users, name, surname, mail, birth_date,authenticated):\n        self.id_users = id_users\n        self.name = name\n        self.surname = surname\n        self.mail = mail\n        self.birth_date = birth_date\n        self.authenticated = authenticated\n\n    def is_active(self):\n        \"\"\"True, as all users are active.\"\"\"\n        return True\n\n    def get_id(self):\n        \"\"\"Return the email address to satisfy Flask-Login's requirements.\"\"\"\n        return self.mail\n\n    def is_authenticated(self):\n        \"\"\"Return True if the user is authenticated.\"\"\"\n        return self.authenticated\n\n    def is_anonymous(self):\n        \"\"\"False, as anonymous users aren't supported.\"\"\"\n        return False\n\n\nclass Artists(db.Model):\n    __tablename__ = 'artists'\n\n    id_artists = db.Column(db.VARCHAR(50), db.ForeignKey('users.id_users'), primary_key=True,)\n    art_name = db.Column(db.VARCHAR(50))\n    label = db.Column(db.VARCHAR(50))\n\n    def __init__(self, id_artists, art_name, label):\n        self.id_artists = id_artists\n        self.art_name = art_name\n        self.label = label\n\n\nclass Songs(db.Model):\n    __tablename__ = 'songs'\n\n    id_songs = db.Column(db.VARCHAR(50), primary_key=True)\n    id_artist = db.Column(db.VARCHAR(50), db.ForeignKey('artists.id_artists'))\n    title = db.Column(db.VARCHAR(50))\n    length = db.Column(db.Integer)\n    date_pub = db.Column(db.Date)\n\n    def __init__(self, id_songs, id_artists, title, length, date_pub):\n        self.id_artist = id_artists\n        self.id_songs = id_songs\n        self.title = title\n        self.length = length\n        self.date_pub = date_pub\n\n\nclass Playlist (db.Model):\n    __tablename__= 'playlist'\n\n    id_playlist = db.Column(db.VARCHAR(50), primary_key=True)\n    date_creation = db.Column(db.Date)\n    type = db.Column(db.Boolean)\n\n    def __init__(self, id_playlist, date_creation, type):\n        self.id_playlist = id_playlist\n        self.date_creation = date_creation\n        self.type = type\n\n\nclass Album(db.Model):\n    __tablename__ = 'album'\n\n    id_album = db.Column(db.VARCHAR(50), primary_key=True)\n    date_pub = db.Column(db.Date)\n    title = db.Column(db.VARCHAR(50))\n\n    def __init__(self, id_album, date_pub, title):\n        self.id_album = id_album\n        self.date_pub = date_pub\n        self.title = title\n\n\nclass PlaylistSongs(db.Model):\n    __tablename__ = 'playlist_songs'\n\n    id_songs = db.Column(db.VARCHAR(50), db.ForeignKey('songs.id_songs'), primary_key=True)\n    id_playlist = db.Column(db.VARCHAR(50), db.ForeignKey('playlist.id_playlist'), primary_key=True)\n\n    def __init__(self, id_songs, id_playlist):\n        self.id_songs = id_songs\n        self.id_playlist = id_playlist\n\n\nclass PlaylistUsers(db.Model):\n    __tablename__ = 'playlist_users'\n\n    id_users = db.Column(db.VARCHAR(50), db.ForeignKey('users.id_users'), primary_key=True)\n    id_playlist = db.Column(db.VARCHAR(50), db.ForeignKey('playlist.id_playlist'), primary_key=True)\n\n    def __init__(self, id_users, id_playlist):\n        self.id_users = id_users\n        self.id_playlist = id_playlist\n\n\nclass SongsAlbum(db.Model):\n    __tablename__ = 'songs_album'\n\n    id_songs = db.Column(db.VARCHAR(50), db.ForeignKey('songs.id_songs'), primary_key=True)\n    id_album = db.Column(db.VARCHAR(50), db.ForeignKey('album.id_album'), primary_key=True)\n\n    def __init__(self, id_songs, id_album):\n        self.id_songs = id_songs\n        self.id_album = id_album\n\n\nclass SongsListened(db.Model):\n    __tablename__ = 'songs_listened'\n\n    id_songs = db.Column(db.VARCHAR(50), db.ForeignKey('songs.id_songs'), primary_key=True)\n    id_users = db.Column(db.VARCHAR(50), db.ForeignKey('users.id_users'), primary_key=True)\n    num_times = db.Column(db.Integer)\n    date_list = db.Column(db.Date)\n\n    def __init__(self, id_songs, id_playlist, num_times, date_list):\n        self.id_songs = id_songs\n        self.id_playlist = id_playlist\n        self.num_times = num_times\n        self.date_list = date_list\n
===================================================================
diff --git a/create.py b/create.py
--- a/create.py	
+++ b/create.py	
@@ -8,9 +8,9 @@
 app.config['SECRET_KEY'] = 'ninninu'
 
 #Radu
-#app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:zxcvbnm@localhost:5432/db_progetto"
+app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:zxcvbnm@localhost:5432/db_progetto"
 #Lorenzo
-app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:A1n3m3d123!@localhost:5432/bd2_proj"
+#app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:A1n3m3d123!@localhost:5432/bd2_proj"
 #Daniele
 #app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:Internet10@localhost:5432/bd2progetto"
 
