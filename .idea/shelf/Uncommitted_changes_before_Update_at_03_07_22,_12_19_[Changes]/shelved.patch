Index: struttura_db.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, redirect, url_for, request, flash\nfrom flask_login import *\nfrom flask_sqlalchemy import SQLAlchemy\nfrom datetime import date\nfrom sqlalchemy import func\n\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = 'ninninu'\n\n# Radu\n# app.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://postgres:zxcvbnm@localhost:5432/db_progetto\"\n# Lorenzo\napp.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://postgres:A1n3m3d123!@localhost:5432/bd2_proj\"\n# Daniele\n# app.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://postgres:Internet10@localhost:5432/bd2progetto\"\n\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"\n\n\ndb = SQLAlchemy(app)\n\n\n@login_manager.user_loader\ndef load_user(id_users):\n    user = db.session.query(Users).filter(Users.id_users == id_users).first()\n\n    return user\n\n\nclass Users(UserMixin, db.Model):\n    id_users = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    surname = db.Column(db.String)\n    sex = db.Column(db.String)\n    mail = db.Column(db.String, unique=True)\n    pwd = db.Column(db.String)\n    birth_date = db.Column(db.Date)\n    authenticated = db.Column(db.Boolean, default=False)\n\n    def __init__(self, name, surname, sex, mail, pwd, birth_date):\n        self.name = name\n        self.surname = surname\n        self.sex = sex\n        self.mail = mail\n        self.pwd = pwd\n        self.birth_date = birth_date\n\n    def get_id(self):\n        return self.id_users\n\n    def is_artist(self):\n        art = db.session.query(Artists).filter(Artists.id_artists == self.id_users)\n        count = 0\n        for a in art:\n            count = count + 1\n\n        if count >= 1:\n            return True\n        return False\n\n\nclass Artists(db.Model):\n    id_artists = db.Column(db.Integer, db.ForeignKey('users.id_users'), primary_key=True, )\n    art_name = db.Column(db.String)\n    label = db.Column(db.String)\n\n    def __init__(self, id_artists, art_name, label):\n        self.id_artists = id_artists\n        self.art_name = art_name\n        self.label = label\n\n\nclass Songs(db.Model):\n    id_songs = db.Column(db.Integer, primary_key=True)\n    id_artist = db.Column(db.Integer, db.ForeignKey('artists.id_artists'))\n    title = db.Column(db.String)\n    length = db.Column(db.Integer)\n    date_pub = db.Column(db.Date)\n    type = db.Column(db.String)\n\n    def __init__(self, id_artists, title, length, date_pub, type):\n        self.id_artist = id_artists\n        self.title = title\n        self.length = length\n        self.date_pub = date_pub\n        self.type = type\n\n\nclass Playlist(db.Model):\n    id_playlist = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    description = db.Column(db.String)\n    date_creation = db.Column(db.Date)\n    private = db.Column(db.Boolean, default=False)\n\n    def __init__(self, id_playlist, name, description, date_creation, private):\n        self.id_playlist = id_playlist\n        self.name = name\n        self.description = description\n        self.date_creation = date_creation\n        self.private = private\n\n\nclass Album(db.Model):\n    id_album = db.Column(db.Integer, primary_key=True)\n    id_artist = db.Column(db.Integer, db.ForeignKey('artists.id_artists'))\n    date_pub = db.Column(db.Date)\n    title = db.Column(db.String)\n\n    def __init__(self, id_artist, date_pub, title):\n        self.id_artist = id_artist\n        self.date_pub = date_pub\n        self.title = title\n\n\nclass PlaylistSongs(db.Model):\n    id_songs = db.Column(db.Integer, db.ForeignKey('songs.id_songs'), primary_key=True)\n    id_playlist = db.Column(db.Integer, db.ForeignKey('playlist.id_playlist'), primary_key=True)\n\n    def __init__(self, id_songs, id_playlist):\n        self.id_songs = id_songs\n        self.id_playlist = id_playlist\n\n\nclass PlaylistUsers(db.Model):\n    id_users = db.Column(db.Integer, db.ForeignKey('users.id_users'), primary_key=True)\n    id_playlist = db.Column(db.Integer, db.ForeignKey('playlist.id_playlist'), primary_key=True)\n    count_song = db.Column(db.Integer)\n\n    def __init__(self, id_users, id_playlist, count_song):\n        self.id_users = id_users\n        self.id_playlist = id_playlist\n        count_song = count_song\n\n\nclass SongsAlbum(db.Model):\n    id_album = db.Column(db.Integer, db.ForeignKey('album.id_album'), primary_key=True)\n    id_songs = db.Column(db.Integer, db.ForeignKey('songs.id_songs'), primary_key=True)\n\n    def __init__(self, id_album, id_songs):\n        self.id_album = id_album\n        self.id_songs = id_songs\n\n\nclass SongsListened(db.Model):\n    id_songs = db.Column(db.Integer, db.ForeignKey('songs.id_songs'), primary_key=True)\n    id_users = db.Column(db.Integer, db.ForeignKey('users.id_users'), primary_key=True)\n    num_times = db.Column(db.Integer)\n    date_list = db.Column(db.Date)\n\n    def __init__(self, id_songs, id_users, num_times, date_list):\n        self.id_songs = id_songs\n        self.id_users = id_users\n        self.num_times = num_times\n        self.date_list = date_list\n\n\ndb.create_all()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/struttura_db.py b/struttura_db.py
--- a/struttura_db.py	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/struttura_db.py	(date 1656754689690)
@@ -9,9 +9,9 @@
 app.config['SECRET_KEY'] = 'ninninu'
 
 # Radu
-# app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:zxcvbnm@localhost:5432/db_progetto"
+app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:zxcvbnm@localhost:5432/db_progetto"
 # Lorenzo
-app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:A1n3m3d123!@localhost:5432/bd2_proj"
+# app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:A1n3m3d123!@localhost:5432/bd2_proj"
 # Daniele
 # app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:Internet10@localhost:5432/bd2progetto"
 
Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from views import *\r\n\r\n\r\n@app.route('/artist/<int:id_artists>')\r\n@login_required\r\ndef artist(id_artists):\r\n    artist = get_artist(id_artists)\r\n    return render_template('Home/artist.html', artist=artist)\r\n\r\n\r\n@app.route('/add')\r\n@login_required\r\ndef add():\r\n\r\n    check = current_user.is_artist()#Un check in più non fa mai male...\r\n    if check:\r\n        return render_template('/Home/add.html')\r\n    else:\r\n        render_template('/Home/home.html')\r\n\r\n\r\n@app.route('/add_album', methods=['GET', 'POST'])\r\n@login_required\r\ndef add_album():\r\n    if request.method == 'POST':\r\n        #Mi faccio fare il form in forma di dizionario\r\n        form = request.form\r\n        #Mi salvo il nome dell'album\r\n        album_name = form.get('album_name')\r\n\r\n        #Mi faccio delle liste con ogni parametro: titolo, lunghezza, genere\r\n        titles = form.getlist('title')\r\n        lengths = form.getlist('length')\r\n        genres = form.getlist('type')\r\n        #Conto quante canzoni devo inserire\r\n        counter = titles.__len__()\r\n\r\n        #Creo oggetto album\r\n        album = Album(current_user.id_users, date.today(), album_name)\r\n\r\n        #Aggiungo l'album al db\r\n        db.session.add(album)\r\n        db.session.commit()\r\n        #Qua dentro mi salvo gli id delle canzoni che ho appena inserito\r\n        song_ids = []\r\n\r\n        #Inserisco con un ciclo for le canzoni\r\n        for i in range(0, counter):\r\n            song = Songs(current_user.id_users, titles[i], lengths[i], date.today(), genres[i])\r\n            # Aggiungo la canzone\r\n            db.session.add(song)\r\n            db.session.commit()\r\n            # Mi salvo il\r\n            song_ids.append(last_song_id())\r\n\r\n        # Associo le canzoni inserite all'album inserito\r\n        x = song_ids.__len__()\r\n\r\n        for j in range(0, x):\r\n            print('Provo a inserire:')\r\n            print(last_album_id(), song_ids[j])\r\n\r\n            song_album = SongsAlbum(last_album_id(), song_ids[j])\r\n\r\n            db.session.add(song_album)\r\n            db.session.commit()\r\n\r\n        return redirect(url_for('home'))\r\n\r\n    return render_template('Album/add_album.html')\r\n\r\ndef last_song_id():\r\n    # So che l'id è sequenziale, quindi ritorno il valore massimo\r\n    return db.session.query(func.max(Songs.id_songs)).first()[0]\r\n\r\ndef last_album_id():\r\n    # So che l'id è sequenziale, quindi ritorno il valore massimo\r\n    return db.session.query(func.max(Album.id_album)).first()[0]\r\n\r\n\r\n@app.route('/add_single')\r\n@login_required\r\ndef add_single():\r\n\r\n    return render_template('Home/add_single.html')\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/app.py	(date 1656758813289)
@@ -5,7 +5,8 @@
 @login_required
 def artist(id_artists):
     artist = get_artist(id_artists)
-    return render_template('Home/artist.html', artist=artist)
+    album = get_artist_albums(id_artists)
+    return render_template('Home/artist.html', artist=artist, album=album)
 
 
 @app.route('/add')
@@ -50,18 +51,15 @@
             # Aggiungo la canzone
             db.session.add(song)
             db.session.commit()
-            # Mi salvo il
+            # Mi salvo l'id delle canzoni in una lista
             song_ids.append(last_song_id())
 
         # Associo le canzoni inserite all'album inserito
         x = song_ids.__len__()
 
         for j in range(0, x):
-            print('Provo a inserire:')
-            print(last_album_id(), song_ids[j])
-
             song_album = SongsAlbum(last_album_id(), song_ids[j])
-
+            # Assegno all'album le canzoni
             db.session.add(song_album)
             db.session.commit()
 
@@ -81,6 +79,19 @@
 @app.route('/add_single')
 @login_required
 def add_single():
+    if request.method == 'POST':
+        form = request.form
+
+        single_title = form.get('single_name')
+        single_length = form.get('single_length')
+        single_genre = form.get('single_genre')
+
+        song = Songs(current_user.id_users, single_title, single_length, date.today(), single_genre)
+
+        db.session.add(song)
+        db.session.commit()
+
+        return redirect(url_for('home'))
 
     return render_template('Home/add_single.html')
 
Index: templates/Home/add_single.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"Home/base.html\" %}\n\n{% block content %}\n    <br>\n    <br>\n    <h2>Add Single</h2>\n\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/Home/add_single.html b/templates/Home/add_single.html
--- a/templates/Home/add_single.html	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/templates/Home/add_single.html	(date 1656756829870)
@@ -3,6 +3,39 @@
 {% block content %}
     <br>
     <br>
-    <h2>Add Single</h2>
-
+    <h2 class="text-center">Add Single</h2>
+    <hr>
+    <form method="POST">
+        <div class="row justify-content-center">
+            <div class="col-sm-6">
+                <div class="form-floating mb-6">
+                    <input type="text" class="form-control" id="single_name" placeholder="Album name" name="single_name">
+                    <label for="single_namee">Single name</label>
+                </div>
+            </div>
+        </div>
+        <br>
+        <div class="row justify-content-center">
+            <div class="col-sm-6">
+                <div class="form-floating mb-6">
+                    <input type="text" class="form-control" id="single_length" placeholder="Length" name="single_length">
+                    <label for="single_length">Single length</label>
+                </div>
+            </div>
+        </div>
+        <br>
+        <div class="row justify-content-center">
+            <div class="col-sm-6">
+                <div class="form-floating mb-6">
+                    <input type="text" class="form-control" id="single_genre" placeholder="Genre" name="single_genre">
+                    <label for="single_genre">Single genre</label>
+                </div>
+            </div>
+        </div>
+        <div class="row justify-content-center">
+            <div class="col-sm-1">
+                <button type="submit" class="btn btn-primary">Submit</button>
+            </div>
+        </div>
+    </form>
 {% endblock %}
\ No newline at end of file
Index: templates/Home/artist.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"Home/base.html\" %}\n\n{% block content %}\n    <br>\n    <br>\n    <h2>{{ artist.art_name }}</h2>\n    <hr>\n    <h3>Canzoni</h3>\n    <ol class=\"list-group list-group-numbered\">\n      <li class=\"list-group-item d-flex justify-content-between align-items-start\">\n        <div class=\"ms-2 me-auto\">\n          <div class=\"fw-bold\">Subheading</div>\n          Cras justo odio\n        </div>\n        <span class=\"badge bg-primary rounded-pill\">14</span>\n      </li>\n      <li class=\"list-group-item d-flex justify-content-between align-items-start\">\n        <div class=\"ms-2 me-auto\">\n          <div class=\"fw-bold\">Subheading</div>\n          Cras justo odio\n        </div>\n        <span class=\"badge bg-primary rounded-pill\">14</span>\n      </li>\n      <li class=\"list-group-item d-flex justify-content-between align-items-start\">\n        <div class=\"ms-2 me-auto\">\n          <div class=\"fw-bold\">Subheading</div>\n          Cras justo odio\n        </div>\n        <span class=\"badge bg-primary rounded-pill\">14</span>\n      </li>\n    </ol>\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/Home/artist.html b/templates/Home/artist.html
--- a/templates/Home/artist.html	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/templates/Home/artist.html	(date 1656688496063)
@@ -29,4 +29,6 @@
         <span class="badge bg-primary rounded-pill">14</span>
       </li>
     </ol>
+    <hr>
+    <h3>Album</h3>
 {% endblock %}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyPackaging\">\r\n    <option name=\"earlyReleasesAsUpgrades\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/.idea/misc.xml	(date 1656754694459)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Pipenv (PROJECT_BD2)" project-jdk-type="Python SDK" />
   <component name="PyPackaging">
     <option name="earlyReleasesAsUpgrades" value="true" />
   </component>
Index: playlist.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\n\nfrom app import *\nfrom auth import *\nfrom stats import *\nfrom stats import take_song, take_playlist\nfrom struttura_db import *\nfrom views import *\nuser = current_user\n\n\ndef get_playlist():\n    playlist = db.session.query(PlaylistUsers).filter(PlaylistUsers.id_users == user.id_users)\n    play_list = []\n\n    for play in playlist:\n        tmp = []\n        p = take_playlist(play.id_playlist)\n        tmp.append(p.name)\n        tmp.append(play.count_song)\n        tmp.append(play.id_playlist)\n        play_list.append(tmp)\n\n    return play_list\n\n\n@app.route('/play_page', methods=['GET', 'POST'])\ndef pl_page():\n    play_list = get_playlist()\n\n    return render_template('Playlist/playlist_list.html', playlist=play_list)\n\n\ndef take_list_song(id_playlist):\n    song = db.session.query(Songs)\n    song_list = []\n    for s in song:\n        if not exits_song_playlist(id_playlist, s.id_songs):\n            tmp = []\n            tmp.append(s.id_songs)\n            tmp.append(s.title)\n            song_list.append(tmp)\n    return song_list\n\n\n@app.route('/playlist_page/<id_playlist>', methods=['GET', 'POST'])\ndef playlist_page(id_playlist):\n    title = (\"#\", \"Title\", \"length\", \"Date\", \"Type\")\n\n    playlist = db.session.query(PlaylistSongs).filter(PlaylistSongs.id_playlist == id_playlist)\n    list_tmp = []\n    count = 0\n    for s in playlist:\n        song_tmp = []\n        count = count + 1\n        prova = take_song(s.id_songs)\n        song_tmp.append(count)\n        song_tmp.append(prova.title)\n        song_tmp.append(prova.length)\n        song_tmp.append(prova.date_pub)\n        song_tmp.append(prova.type)\n        list_tmp.append(song_tmp)\n\n    song_list = tuple(list_tmp)\n    play_list = get_playlist()\n    play = take_playlist(id_playlist)\n    song_choose = take_list_song(id_playlist)\n\n    return render_template('Playlist/playlist.html', headings=title, data=song_list, playlist=play_list,\n                           playlist_obj=play, song_choose=song_choose)\n\n\ndef count_id_playlist():\n    return db.session.query(func.max(Playlist.id_playlist)).first()\n\n\ndef exits_song_playlist(id_playlist, id_song):\n    song = db.session.query(PlaylistSongs).filter(PlaylistSongs.id_playlist == id_playlist)\n\n    for s in song:\n        if s.id_songs == id_song:\n            return True\n    return False\n\n\n@app.route('/create_playlist', methods=['GET', 'POST'])\ndef create_playlist():\n    if request.method == 'POST':\n        lol = count_id_playlist()\n\n        id_playlist = lol[0]+1\n        name = request.form['name']\n        private = request.form['type']\n        description = request.form['description']\n        date_creation = date.today()\n\n        if private == \"True\":\n            playlist = Playlist(id_playlist, name, description, date_creation, True)\n        else:\n            playlist = Playlist(id_playlist, name, description, date_creation, False)\n\n        db.session.add(playlist)\n        db.session.commit()\n\n        playlist_user = PlaylistUsers(user.id_users, id_playlist, 0)\n\n        db.session.add(playlist_user)\n        db.session.commit()\n\n        return playlist_page(id_playlist)\n\n    return render_template('Playlist/nuova_playlist.html')\n\n\n@app.route('/addSongPlaylist/<id_song>/<id_playlist>', methods=['GET', 'POST'])\ndef add_song_playlist(id_song, id_playlist):\n\n    playlist_song = PlaylistSongs(id_song, id_playlist)\n    song_list = db.session.query(PlaylistUsers).filter(PlaylistUsers.id_users == user.id_users)\n\n    for s in song_list:\n        if s.id_playlist == id_playlist:\n            s.count_song += 1\n            db.session.commit()\n\n    db.session.add(playlist_song)\n\n    db.session.commit()\n\n    return playlist_page(id_playlist)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/playlist.py b/playlist.py
--- a/playlist.py	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/playlist.py	(date 1656756215773)
@@ -88,16 +88,16 @@
     if request.method == 'POST':
         lol = count_id_playlist()
 
-        id_playlist = lol[0]+1
+        id_playlist = 1
         name = request.form['name']
         private = request.form['type']
         description = request.form['description']
         date_creation = date.today()
 
         if private == "True":
-            playlist = Playlist(id_playlist, name, description, date_creation, True)
+            playlist = Playlist(id_playlist + 1, name, description, date_creation, True)
         else:
-            playlist = Playlist(id_playlist, name, description, date_creation, False)
+            playlist = Playlist(id_playlist + 1, name, description, date_creation, False)
 
         db.session.add(playlist)
         db.session.commit()
Index: artist.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\n\nfrom app import *\nfrom auth import *\nfrom struttura_db import *\n\n\ndef is_artist():\n    art = db.session.query(Artists).filter(Artists.id_artists == current_user.id_users)\n    count = 0\n    for a in art:\n        count = count +1\n\n    if count >= 1:\n        return True\n    return False\n\n\ndef count_song(id_song):\n\n    song = db.session.query(SongsListened).filter(SongsListened.id_songs == id_song)\n    x = 0\n    for s in song:\n        x = x + s.num_times\n    return x\n\n\ndef id_play():\n    playlist = db.session.query(Playlist).order_by(Playlist.id_playlist.desc()).first()\n    return playlist.id_playlist\n\n\ndef get_artist(id):\n    artist = db.session.query(Artists).filter(Artists.id_artists == id).first()\n\n    return artist\n\n\n@app.route('/song_ar', methods=['GET', 'POST'])\ndef song_ar():\n\n    title = ( \"Title\", \"length\", \"Date\", \"Type\", \"Listened\")\n    print(id_play())\n    sl = db.session.query(Songs).filter(Songs.id_artist == current_user.id_users)\n    number = []\n    songs_name = []\n    list_tmp = []\n    count = 0\n    for s in sl:\n        song_tmp = []\n        x = count_song(s.id_songs)\n        song_tmp.append(s.title)\n        song_tmp.append(s.length)\n        song_tmp.append(s.date_pub)\n        song_tmp.append(s.type)\n        song_tmp.append(x)\n        list_tmp.append(song_tmp)\n        if count <= 10:\n            songs_name.append(s.title)\n            number.append(x)\n        count = count + 1\n\n    list_tmp.sort(key=lambda x:x[4], reverse=True)\n    song_list = tuple(list_tmp)\n    return render_template('Stats/Artist/songs_artist.html', headings=title, data=song_list, number=number,\n                           songs_name=json.dumps(songs_name), artist_b=is_artist())\n\n\ndef count_album(id_album):\n    al = db.session.query(SongsAlbum).filter(SongsAlbum.id_album == id_album)\n    x = 0\n    for a in al:\n        x = x + count_song(a.id_songs)\n\n    return x\n\n\n@app.route('/album_ar', methods=['GET', 'POST'])\ndef alb_ar():\n    title = (\"Title\", \"Date\", \"Listened\")\n\n    sl = db.session.query(Album).filter(Album.id_artist == current_user.id_users)\n    number = []\n    songs_name = []\n    list_tmp = []\n    count = 0\n    for s in sl:\n        song_tmp = []\n        x = count_album(s.id_album)\n        song_tmp.append(s.title)\n        song_tmp.append(s.date_pub)\n        song_tmp.append(x)\n        list_tmp.append(song_tmp)\n        if count <= 10:\n            songs_name.append(s.title)\n            number.append(x)\n        count = count + 1\n\n    list_tmp.sort(key=lambda x: x[2], reverse=True)\n    song_list = tuple(list_tmp)\n    return render_template('Stats/Artist/albums_artist.html', headings=title, data=song_list, number=number,\n                           songs_name=json.dumps(songs_name), artist_b=is_artist())\n\n\n@app.route('/art', methods=['GET', 'POST'])\ndef default():\n    return render_template('Stats/Artist/stats_artist.html')\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/artist.py b/artist.py
--- a/artist.py	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/artist.py	(date 1656702039162)
@@ -36,6 +36,18 @@
     return artist
 
 
+def get_artist_albums(id):
+    albums = db.session.query(Album).filter(Album.id_artist == id).all()
+
+    return albums
+
+
+def get_artist_songs(id):
+    songs = db.session.query(Songs).filter(Songs.id_songs == id).all()
+
+    return songs
+
+
 @app.route('/song_ar', methods=['GET', 'POST'])
 def song_ar():
 
Index: .idea/progetto.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"Flask\">\n    <option name=\"enabled\" value=\"true\" />\n  </component>\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n  <component name=\"TemplatesService\">\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Jinja2\" />\n    <option name=\"TEMPLATE_FOLDERS\">\n      <list>\n        <option value=\"$MODULE_DIR$/templates\" />\n      </list>\n    </option>\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/progetto.iml b/.idea/progetto.iml
--- a/.idea/progetto.iml	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/.idea/progetto.iml	(date 1656754694455)
@@ -7,7 +7,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"d88d96a5-0874-4866-a26c-939fcccc884d\" name=\"Changes\" comment=\"Ho aggiunto su struttura_db func da sqlalchemy\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/struttura_db.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/struttura_db.py\" afterDir=\"false\" />\n    </list>\n    <list id=\"c667252f-f681-4057-bf25-df95b3989900\" name=\"Changes by lorenzodemenia\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n        <option value=\"JavaScript File\" />\n        <option value=\"HTML File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\n    <envs>\n      <env key=\"FLASK_APP\" value=\"app\" />\n    </envs>\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\n    <option name=\"myEnvs\">\n      <map>\n        <entry key=\"FLASK_APP\" value=\"app\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2AZzs4txO5A52dLtDz0eoitSwKC\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <OptionsSetting value=\"false\" id=\"Update\" />\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;codeWithMe.voiceChat.enabledByDefault&quot;: &quot;false&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;python.debugger.dataview.coloredbydefault&quot;: &quot;false&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;vcs.Git&quot;\n  },\n  &quot;keyToStringList&quot;: {\n    &quot;ChangesTree.GroupingKeys&quot;: [\n      &quot;directory&quot;\n    ]\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration name=\"Flask (app.py)\" type=\"Python.FlaskServer\" nameIsGenerated=\"true\">\n      <option name=\"flaskDebug\" value=\"true\" />\n      <module name=\"progetto\" />\n      <option name=\"target\" value=\"$PROJECT_DIR$/app.py\" />\n      <option name=\"targetType\" value=\"PATH\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"d88d96a5-0874-4866-a26c-939fcccc884d\" name=\"Changes\" comment=\"\" />\n      <created>1655232100169</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1655232100169</updated>\n      <workItem from=\"1655232103528\" duration=\"2095000\" />\n      <workItem from=\"1655234233161\" duration=\"1469000\" />\n      <workItem from=\"1655236474916\" duration=\"431000\" />\n      <workItem from=\"1655236930166\" duration=\"814000\" />\n      <workItem from=\"1655237760275\" duration=\"475000\" />\n      <workItem from=\"1655238254088\" duration=\"400000\" />\n      <workItem from=\"1655238670629\" duration=\"1593000\" />\n      <workItem from=\"1655318322219\" duration=\"8057000\" />\n      <workItem from=\"1655456455413\" duration=\"4724000\" />\n      <workItem from=\"1655473698706\" duration=\"4447000\" />\n      <workItem from=\"1655546192886\" duration=\"376000\" />\n      <workItem from=\"1655550030672\" duration=\"5005000\" />\n      <workItem from=\"1655884314806\" duration=\"17730000\" />\n      <workItem from=\"1655989499895\" duration=\"6781000\" />\n      <workItem from=\"1656060479483\" duration=\"6096000\" />\n      <workItem from=\"1656070017220\" duration=\"1346000\" />\n      <workItem from=\"1656664740853\" duration=\"2310000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Sistemato l'errore che non mi diceva se ho sbagliato password al login\">\n      <created>1656256863294</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656256863294</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Ho iniziato a lavorare sulla home, primi lavoretti\">\n      <created>1656260356622</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656260356622</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"mi son svegliato\">\n      <created>1656270178408</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656270178408</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Fanculo ho messo un'immagine stock per tutte e ciao, presa da un link online così non devo caricare nulla\">\n      <created>1656343039380</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656343039380</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Ho fatto in modo che nella home gli artisti vengano caricati dal db, ho iniziato a lavorare alla pagina dell'artista\">\n      <created>1656352868567</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656352868567</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Ho fatto in modo che nella home gli artisti vengano caricati dal db, ho iniziato a lavorare alla pagina dell'artista\">\n      <created>1656352887482</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656352887482</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Ora il testo nella card ha un aspetto decente\">\n      <created>1656353157305</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656353157305</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Aggiunto su struttura db il metodo per vedere se un utente è anche un artista\">\n      <created>1656353378490</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656353378490</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Iniziata la pagina dell'artista, intanto mi reindirizza alla pagina giusta e mi fa evdere il nome, riordinato artist.py, aggiunto un metodo e ho tolto user e uso current user, era useless...\">\n      <created>1656519109695</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656519109695</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Fatta la pagina per l'aggiunta di singolo o album, ora devo fare la parte del form e via dicendo, sarà divertente\">\n      <created>1656536607686</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656536607686</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Ora c'è da creare il form di aggiunta dell'album con la creazione dinamica di quante caselle vogliamo per le canzoni, bisognerà andare giù di js, poco da fare\">\n      <created>1656545413574</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656545413574</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"FUnziona la generazione delle righe nell'inserimento album\">\n      <created>1656663889397</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656663889397</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Inserimento album a buon punto\">\n      <created>1656682874140</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656682874141</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Ho aggiunto su struttura_db func da sqlalchemy\">\n      <created>1656686615378</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1656686615378</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"15\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Sistemato l'errore che non mi diceva se ho sbagliato password al login\" />\n    <MESSAGE value=\"Ho iniziato a lavorare sulla home, primi lavoretti\" />\n    <MESSAGE value=\"mi son svegliato\" />\n    <MESSAGE value=\"Fanculo ho messo un'immagine stock per tutte e ciao, presa da un link online così non devo caricare nulla\" />\n    <MESSAGE value=\"Ho fatto in modo che nella home gli artisti vengano caricati dal db, ho iniziato a lavorare alla pagina dell'artista\" />\n    <MESSAGE value=\"Ora il testo nella card ha un aspetto decente\" />\n    <MESSAGE value=\"Aggiunto su struttura db il metodo per vedere se un utente è anche un artista\" />\n    <MESSAGE value=\"Iniziata la pagina dell'artista, intanto mi reindirizza alla pagina giusta e mi fa evdere il nome, riordinato artist.py, aggiunto un metodo e ho tolto user e uso current user, era useless...\" />\n    <MESSAGE value=\"Fatta la pagina per l'aggiunta di singolo o album, ora devo fare la parte del form e via dicendo, sarà divertente\" />\n    <MESSAGE value=\"Ora c'è da creare il form di aggiunta dell'album con la creazione dinamica di quante caselle vogliamo per le canzoni, bisognerà andare giù di js, poco da fare\" />\n    <MESSAGE value=\"FUnziona la generazione delle righe nell'inserimento album\" />\n    <MESSAGE value=\"Inserimento album a buon punto\" />\n    <MESSAGE value=\"Ho aggiunto su struttura_db func da sqlalchemy\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Ho aggiunto su struttura_db func da sqlalchemy\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/PROJECT_BD2$Flask__auth_py_.coverage\" NAME=\"Flask (auth.py) Coverage Results\" MODIFIED=\"1656161871967\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/PROJECT_BD2$Flask.coverage\" NAME=\"Flask Coverage Results\" MODIFIED=\"1656672850010\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\n    <SUITE FILE_PATH=\"coverage/PROJECT_BD2$Flask__app_py_.coverage\" NAME=\"Flask (app.py) Coverage Results\" MODIFIED=\"1656678057458\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2bb6ea51403ae852fdee45c845fb05b7bc5b89f7)
+++ b/.idea/workspace.xml	(date 1656756500719)
@@ -4,10 +4,16 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="d88d96a5-0874-4866-a26c-939fcccc884d" name="Changes" comment="Ho aggiunto su struttura_db func da sqlalchemy">
+    <list default="true" id="d88d96a5-0874-4866-a26c-939fcccc884d" name="Changes" comment="Inserimento album FINITO">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/progetto.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/progetto.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/artist.py" beforeDir="false" afterPath="$PROJECT_DIR$/artist.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/playlist.py" beforeDir="false" afterPath="$PROJECT_DIR$/playlist.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/struttura_db.py" beforeDir="false" afterPath="$PROJECT_DIR$/struttura_db.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/Home/add_single.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/Home/add_single.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/Home/artist.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/Home/artist.html" afterDir="false" />
     </list>
     <list id="c667252f-f681-4057-bf25-df95b3989900" name="Changes by lorenzodemenia" comment="" />
     <option name="SHOW_DIALOG" value="false" />
@@ -213,7 +219,14 @@
       <option name="project" value="LOCAL" />
       <updated>1656686615378</updated>
     </task>
-    <option name="localTasksCounter" value="15" />
+    <task id="LOCAL-00015" summary="Inserimento album FINITO">
+      <created>1656687779557</created>
+      <option name="number" value="00015" />
+      <option name="presentableId" value="LOCAL-00015" />
+      <option name="project" value="LOCAL" />
+      <updated>1656687779557</updated>
+    </task>
+    <option name="localTasksCounter" value="16" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -244,11 +257,12 @@
     <MESSAGE value="FUnziona la generazione delle righe nell'inserimento album" />
     <MESSAGE value="Inserimento album a buon punto" />
     <MESSAGE value="Ho aggiunto su struttura_db func da sqlalchemy" />
-    <option name="LAST_COMMIT_MESSAGE" value="Ho aggiunto su struttura_db func da sqlalchemy" />
+    <MESSAGE value="Inserimento album FINITO" />
+    <option name="LAST_COMMIT_MESSAGE" value="Inserimento album FINITO" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/PROJECT_BD2$Flask__auth_py_.coverage" NAME="Flask (auth.py) Coverage Results" MODIFIED="1656161871967" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/PROJECT_BD2$Flask.coverage" NAME="Flask Coverage Results" MODIFIED="1656672850010" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
-    <SUITE FILE_PATH="coverage/PROJECT_BD2$Flask__app_py_.coverage" NAME="Flask (app.py) Coverage Results" MODIFIED="1656678057458" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/PROJECT_BD2$Flask__app_py_.coverage" NAME="Flask (app.py) Coverage Results" MODIFIED="1656754798653" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
